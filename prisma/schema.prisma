// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Authentication & Users
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  customers Customer[]
  products  Product[]
  blogPosts BlogPost[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  EDITOR
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  salePrice   Decimal?
  sku         String   @unique
  category    String
  subcategory String?
  tags        String? // Comma-separated tags
  images      String? // Comma-separated image URLs
  isActive    Boolean  @default(true)
  inStock     Boolean  @default(true)
  stockQuantity Int    @default(0)
  weight      Decimal?
  dimensions  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]
  createdBy  User      @relation(fields: [createdById], references: [id])
  createdById String

  @@map("products")
}

// Customers
model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  addresses Address[] // One-to-many
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  createdBy User     @relation(fields: [createdById], references: [id])
  createdById String

  @@map("customers")
}

// Address
model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String   @default("Canada")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String

  @@map("addresses")
}

// Orders
model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal
  subtotal      Decimal
  tax           Decimal       @default(0)
  shipping      Decimal       @default(0)
  discount      Decimal       @default(0)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  customer      Customer      @relation(fields: [customerId], references: [id])
  customerId    String
  orderItems    OrderItem[]
  createdBy     User          @relation(fields: [createdById], references: [id])
  createdById   String

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Order Items
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@map("order_items")
}

// Blog Posts
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  tags        String? // Comma-separated tags
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String

  @@map("blog_posts")
}

// Analytics
model Analytics {
  id        String   @id @default(cuid())
  type      String   // page_view, purchase, etc.
  data      Json
  timestamp DateTime @default(now())

  @@map("analytics")
}
